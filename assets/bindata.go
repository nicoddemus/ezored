// Code generated by go-bindata.
// sources:
// bindata/init-command/ezored-project.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataInitCommandEzoredProjectJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4d\x4e\xc3\x40\x0c\x85\xd7\xf6\x29\x22\xaf\x1b\xb1\xcf\x1d\x90\xd8\xa3\x2e\xa6\x19\x13\x5c\x91\xf1\xc8\xe3\x22\x85\x2a\x77\x47\x13\x42\xf9\x0b\x8b\x76\x6b\x7f\x7e\xfe\xf4\xce\x08\xd4\x6b\x7a\x92\x81\xba\xe6\x8c\x00\x94\xc2\xc8\xd4\x35\x74\x3f\x35\x0f\xa6\x47\xee\x9d\x10\xe6\x1d\x02\x79\xb0\x81\xbd\x50\xd7\x3c\x22\x40\x85\xbf\x68\xd1\x42\xbb\x65\x62\x9c\xb5\x88\xab\x4d\x6b\xe2\x37\x8a\xdf\xd4\x38\xde\x7d\x04\xb5\x97\x1b\x20\x9f\xf2\x02\x0c\xe2\xcf\xa7\xc3\xe7\xf4\x95\xad\x88\xa6\xba\x38\x74\x63\x28\xce\x46\x75\x33\x23\x2c\x46\xbf\x1c\x42\x8a\xa6\x12\xaf\xf6\xf8\x71\x77\x93\x0b\xc2\xbe\x16\x14\x39\x73\x8a\x9c\x7a\xe1\xed\x96\xd6\xbf\x17\x6e\x6a\xe3\x51\x52\x92\xb6\x9c\x72\x56\xf3\x55\x7d\xcb\xe0\x3f\x81\x8d\x1e\xfe\x7e\x29\x61\xcc\x2f\x7c\x4b\x3a\xc2\x1e\xe7\xf7\x00\x00\x00\xff\xff\xf6\x27\xa7\x68\x25\x02\x00\x00")

func bindataInitCommandEzoredProjectJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataInitCommandEzoredProjectJson,
		"bindata/init-command/ezored-project.json",
	)
}

func bindataInitCommandEzoredProjectJson() (*asset, error) {
	bytes, err := bindataInitCommandEzoredProjectJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/init-command/ezored-project.json", size: 549, mode: os.FileMode(420), modTime: time.Unix(1505553562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/init-command/ezored-project.json": bindataInitCommandEzoredProjectJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"init-command": &bintree{nil, map[string]*bintree{
			"ezored-project.json": &bintree{bindataInitCommandEzoredProjectJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

